// This file is automatically generated, please do not touch

package slime.base.proto.autogen;


import slime.base.proto.SByteBuffer;
import slime.base.proto.types.*;
import slime.base.proto.autogen.*;
import slime.base.proto.Util;
import java.util.UUID;

/**  This is the second packet sent by the client. If this packet is received in the middle of a connection, the server should clear its internal connection data (such as the handleâ†’command map) and start all over again. */
public class SlimeHandshake implements CommandData {
	public static final UUID COMMAND_UUID = UUID.fromString("00000002-445e-4484-bc3d-f0c696a3080c");
	public static final long FLAGS = 1;

	/**  Should be set to 1. */
	public long protocol_version;

	/**  The client's installed firmware type and version. */
	public UUID firmware;

	/**  Identifier for the hardware kind and revision. */
	public UUID hardware;

	/**  Random unique identifier, different per each tracker. */
	public UUID hw_uid;

	/**  Level of reliability the protocol should ensure. For example, TCP communication is reliable enough to set this to 0, while UDP communication should have all bits enabled. */
	public long reliability;

	@Override
	public UUID getCommandUUID(){
		return SlimeHandshake.COMMAND_UUID;
	}

	@Override
	public void get(SByteBuffer buf){
		protocol_version = buf.getU32();
		firmware = buf.getUUID();
		hardware = buf.getUUID();
		hw_uid = buf.getUUID();
		reliability = buf.getU32();
	}

	@Override
	public void put(SByteBuffer buf){
		buf.putU32(protocol_version);
		buf.putUUID(firmware);
		buf.putUUID(hardware);
		buf.putUUID(hw_uid);
		buf.putU32(reliability);
	}

	public static SlimeHandshake get_s(SByteBuffer buf){
		SlimeHandshake f = new SlimeHandshake();
		f.get(buf);
		return f;
	}
}